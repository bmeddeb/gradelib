diff --git a/python/gradelib/__init__.py b/python/gradelib/__init__.py
index abcdef0..1234567 100644
--- a/python/gradelib/__init__.py
+++ b/python/gradelib/__init__.py
@@ class RepoManager:
     async def fetch_clone_tasks(self) -> Dict[str, CloneTask]:
         rust_tasks = await self._rust_manager.fetch_clone_tasks()
-        return convert_clone_tasks(rust_tasks)
+        if rust_tasks is None:
+            raise ValueError("Failed to fetch clone tasks")
+        return convert_clone_tasks(rust_tasks)

     async def bulk_blame(self, target_repo_url: str, file_paths: List[str]) -> Dict[str, Union[List[BlameLineInfo], str]]:
-        return await self._rust_manager.bulk_blame(target_repo_url, file_paths)
+        result = await self._rust_manager.bulk_blame(target_repo_url, file_paths)
+        if not isinstance(result, dict):
+            raise TypeError(f"Expected Dict[str, Union[List[BlameLineInfo], str]], got {type(result)}")
+        return result
@@ class RepoManager:
     async def analyze_commits(self, target_repo_url: str) -> List[CommitInfo]:
-        return await self._rust_manager.analyze_commits(target_repo_url)
+        result = await self._rust_manager.analyze_commits(target_repo_url)
+        if not isinstance(result, list):
+            raise TypeError(f"Expected List[CommitInfo], got {type(result)}")
+        return result
@@ class RepoManager:
     async def fetch_collaborators(self, repo_urls: List[str]) -> Dict[str, List[CollaboratorInfo]]:
-        return await self._rust_manager.fetch_collaborators(repo_urls)
+        result = await self._rust_manager.fetch_collaborators(repo_urls)
+        if not isinstance(result, dict):
+            raise TypeError(f"Expected Dict[str, List[CollaboratorInfo]], got {type(result)}")
+        return result
@@ class RepoManager:
     async def fetch_issues(self, repo_urls: List[str], state: Optional[str] = None) -> Dict[str, Union[List[IssueInfo], str]]:
-        return await self._rust_manager.fetch_issues(repo_urls, state)
+        result = await self._rust_manager.fetch_issues(repo_urls, state)
+        if not isinstance(result, dict):
+            raise TypeError(f"Expected Dict[str, Union[List[IssueInfo], str]], got {type(result)}")
+        return result
@@ class RepoManager:
     async def fetch_pull_requests(self, repo_urls: List[str], state: Optional[str] = None) -> Dict[str, Union[List[PullRequestInfo], str]]:
-        return await self._rust_manager.fetch_pull_requests(repo_urls, state)
+        result = await self._rust_manager.fetch_pull_requests(repo_urls, state)
+        if not isinstance(result, dict):
+            raise TypeError(f"Expected Dict[str, Union[List[PullRequestInfo], str]], got {type(result)}")
+        return result
@@ class RepoManager:
     async def fetch_code_reviews(self, repo_urls: List[str]) -> Dict[str, Union[Dict[str, List[CodeReviewInfo]], str]]:
-        return await self._rust_manager.fetch_code_reviews(repo_urls)
+        result = await self._rust_manager.fetch_code_reviews(repo_urls)
+        if not isinstance(result, dict):
+            raise TypeError(f"Expected Dict[str, Union[Dict[str, List[CodeReviewInfo]], str]], got {type(result)}")
+        return result
@@ class RepoManager:
     async def fetch_comments(self, repo_urls: List[str], comment_types: Optional[List[str]] = None) -> Dict[str, Union[List[CommentInfo], str]]:
-        return await self._rust_manager.fetch_comments(repo_urls, comment_types)
+        result = await self._rust_manager.fetch_comments(repo_urls, comment_types)
+        if not isinstance(result, dict):
+            raise TypeError(f"Expected Dict[str, Union[List[CommentInfo], str]], got {type(result)}")
+        return result
@@ class RepoManager:
     async def analyze_branches(self, repo_urls: List[str]) -> Dict[str, Union[List[BranchInfo], str]]:
-        return await self._rust_manager.analyze_branches(repo_urls)
+        result = await self._rust_manager.analyze_branches(repo_urls)
+        if not isinstance(result, dict):
+            raise TypeError(f"Expected Dict[str, Union[List[BranchInfo], str]], got {type(result)}")
+        return result
+
+RepoManager.__doc__ = _RustRepoManager.__doc__
