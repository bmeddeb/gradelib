name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          - os: ubuntu-latest
            target: x86_64
          - os: windows-latest
            target: x64
          - os: macos-latest
            target: universal2

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin==1.4.0 build twine
          maturin --version

      - name: Build wheels for macOS
        if: runner.os == 'macOS'
        run: |
          echo "Building for macOS with target universal2-apple-darwin"
          # Try to get help info to see available options
          maturin build --help || true
          maturin build --release --strip --target universal2-apple-darwin --out dist
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.12'

      - name: Build wheels for other platforms
        if: runner.os != 'macOS'
        run: |
          echo "Building for ${RUNNER_OS}"
          maturin build --release --strip --out dist

      - name: Build source distribution
        if: runner.os == 'Linux' && matrix.python-version == '3.10'
        run: |
          echo "Building source distribution"
          python -m build --sdist
          ls -la dist/

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.whl

      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Checking distribution files"
          ls -la dist/
          echo "Validating with twine check"
          twine check dist/*
          echo "Uploading to PyPI"
          twine upload dist/*
